name: Auto Tag on Main Merge

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write

jobs:
  auto-tag:
    name: Auto Tag Crate Version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=${VERSION}-crate" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          echo "Tag name will be: ${VERSION}-crate"

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          if git rev-parse "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME does not exist"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          VERSION="${{ steps.extract_version.outputs.version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "$TAG_NAME" -m "Auto-tag for crate version $VERSION"
          
          # Push the tag
          git push origin "$TAG_NAME"
          
          echo "Created and pushed tag: $TAG_NAME"

      - name: Tag already exists
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "Tag ${{ steps.extract_version.outputs.tag_name }} already exists, skipping tag creation"
